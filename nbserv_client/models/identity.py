# coding: utf-8

"""
    Jupyter Server API

    Server API

    The version of the OpenAPI document: 5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Identity(BaseModel):
    """
    The identity of the currently authenticated user
    """ # noqa: E501
    username: Optional[StrictStr] = Field(default=None, description="Unique string identifying the user ")
    name: Optional[StrictStr] = Field(default=None, description="For-humans name of the user. May be the same as `username` in systems where only usernames are available. ")
    display_name: Optional[StrictStr] = Field(default=None, description="Alternate rendering of name for display. Often the same as `name`. ")
    initials: Optional[StrictStr] = Field(default=None, description="Short string of initials. Initials should not be derived automatically due to localization issues. May be `null` if unavailable. ")
    avatar_url: Optional[StrictStr] = Field(default=None, description="URL of an avatar to be used for the user. May be `null` if unavailable. ")
    color: Optional[StrictStr] = Field(default=None, description="A CSS color string to use as a preferred color, such as for collaboration cursors. May be `null` if unavailable. ")
    __properties: ClassVar[List[str]] = ["username", "name", "display_name", "initials", "avatar_url", "color"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Identity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Identity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "initials": obj.get("initials"),
            "avatar_url": obj.get("avatar_url"),
            "color": obj.get("color")
        })
        return _obj


